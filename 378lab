import os
from hashlib import md5
from cryptography.hazmat.primitives.ciphers.algorithms import AES
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography import utils
from cryptography.hazmat.backends.interfaces import CipherBackend
from cryptography.hazmat.primitives import padding

#current working directory for ease
cwd = os.getcwd()
print(cwd)
print(os.listdir(cwd))

#create filepath to file in cwd
filepath = 'hw1 174.pages'


def MyEncrypt(message, key):
	iv = os.urandom(16)
	padder = padding.PKCS7(128).padder()
	message = padder.update(message)
	message += padder.finalize()
	backend = default_backend()
	cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=backend)
	encryptor = cipher.encryptor()
	ct = encryptor.update(message) + encryptor.finalize()
	return ct, iv

def MyFileEncrypt(filepath):
	key = os.urandom(32)
	fr = open(filepath, "rwx")
	message = fr.read()
	fr.close()
	(ct, iv) = MyEncrypt(message, key)
	ext = filepath
	file = open(filepath, "wb")
	file.write(ct)
	file.close()
	return ct, iv, key, ext

def MyDecrypt(ct, key, iv):
	backend = default_backend()
	cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=backend)
	decryptor = cipher.decryptor()
	newMessage = decryptor.update(ct) + decryptor.finalize()
	return newMessage

def MyFileDecrypt(ct, key, iv, filepath):
	file = open(filepath, "wb")
	(newMessage) = MyDecrypt(ct, key, iv)
	file.write(newMessage)
	file.close()
	return newMessage

(ct, iv, key, ext) = MyFileEncrypt(filepath)
#print(ct)
(newMessage) = MyFileDecrypt(ct, key, iv, ext)
#print(newMessage)
